{"meta":{"title":"Tierney","subtitle":null,"description":null,"author":"Tierney","url":"http://Tierney.com","root":"/"},"pages":[{"title":"分类页面","date":"2019-06-26T10:41:07.000Z","updated":"2019-06-26T10:42:34.421Z","comments":true,"path":"categories/index.html","permalink":"http://Tierney.com/categories/index.html","excerpt":"","text":""},{"title":"标签页面","date":"2019-06-26T10:36:43.000Z","updated":"2019-06-26T10:37:39.435Z","comments":true,"path":"tags/index.html","permalink":"http://Tierney.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JS原型与原型链","slug":"JS原型与原型链","date":"2019-07-05T05:49:43.000Z","updated":"2019-07-05T06:04:38.805Z","comments":true,"path":"2019/07/05/JS原型与原型链/","link":"","permalink":"http://Tierney.com/2019/07/05/JS原型与原型链/","excerpt":"JS原型JS原型对象在 JavaScript 中，每当定义一个对象（函数也是对象）时候，对象中都会包含一些预定义的属性。其中每个函数对象都有一个prototype 属性，这个属性指向函数的原型对象。","text":"JS原型JS原型对象在 JavaScript 中，每当定义一个对象（函数也是对象）时候，对象中都会包含一些预定义的属性。其中每个函数对象都有一个prototype 属性，这个属性指向函数的原型对象。 123456789101112131415function Person() &#123;&#125;Person.prototype.name = &apos;Zaxlct&apos;;Person.prototype.age = 28;Person.prototype.job = &apos;Software Engineer&apos;;Person.prototype.sayName = function() &#123; alert(this.name);&#125; var person1 = new Person();person1.sayName(); // &apos;Zaxlct&apos;var person2 = new Person();person2.sayName(); // &apos;Zaxlct&apos;console.log(person1.sayName == person2.sayName); //true 我们得到了本文第一个「定律」： 1每个对象都有 __proto__ 属性，但只有函数对象才有 prototype 属性 ###那什么是原型对象呢？ 我们把上面的例子改一改你就会明白了： 12345678Person.prototype = &#123; name: &apos;Zaxlct&apos;, age: 28, job: &apos;Software Engineer&apos;, sayName: function() &#123; alert(this.name); &#125;&#125; 原型对象，顾名思义，它就是一个普通对象（废话 = =!）。从现在开始你要牢牢记住原型对象就是 Person.prototype ，如果你还是害怕它，那就把它想想成一个字母 A：A 123---在上面我们给 A 添加了 四个属性：name、age、job、sayName。其实它还有一个默认的属性：``` constructor constructor（构造函数）属性，这个属性（是一个指针）指向 prototype 属性所在的函数（Person）```123上面这句话有点拗口，我们「翻译」一下：A 有一个默认的 constructor 属性，这个属性是一个指针，指向 Person。即：``` Person.prototype.constructor == Person","categories":[{"name":"JS基础知识","slug":"JS基础知识","permalink":"http://Tierney.com/categories/JS基础知识/"}],"tags":[{"name":"导航","slug":"导航","permalink":"http://Tierney.com/tags/导航/"},{"name":"分享","slug":"分享","permalink":"http://Tierney.com/tags/分享/"}]},{"title":"JS全局预编译","slug":"JS全局预编译","date":"2019-07-05T05:36:59.000Z","updated":"2019-07-05T05:47:43.081Z","comments":true,"path":"2019/07/05/JS全局预编译/","link":"","permalink":"http://Tierney.com/2019/07/05/JS全局预编译/","excerpt":"","text":"JS函数预编译与函数体内预编译类似,不同点为全局预编译创建GO对象,在GO内部进行变量赋值.全局预编译内部若AO对象寻找不到未出现变量名,则会在全局内部部进行寻找.也就是说,预编译的方向是由里向外的.举个简单的例子 123456a = 1function fn()&#123; console.log(a) //a:1&#125; fn() 1234567a=1function fn()&#123; var a; console.log(a) //a:undefined&#125;fn()","categories":[{"name":"JS基础知识","slug":"JS基础知识","permalink":"http://Tierney.com/categories/JS基础知识/"}],"tags":[{"name":"导航","slug":"导航","permalink":"http://Tierney.com/tags/导航/"},{"name":"分享","slug":"分享","permalink":"http://Tierney.com/tags/分享/"}]},{"title":"聊聊 NexT 主题","slug":"无内鬼","date":"2019-06-26T14:39:54.000Z","updated":"2019-07-01T07:43:50.721Z","comments":true,"path":"2019/06/26/无内鬼/","link":"","permalink":"http://Tierney.com/2019/06/26/无内鬼/","excerpt":"NexT 主题 快满一周岁了，值此之际，碎碎念一下（没有干货）。正如我在 V2EX 分享 时的介绍一样，NexT 的前身叫做 Notes。在做 Notes 主题的时候，基于当时的需求出发点，从好听上来讲是简洁，不好听就是简陋（真直接，脸红）。","text":"NexT 主题 快满一周岁了，值此之际，碎碎念一下（没有干货）。正如我在 V2EX 分享 时的介绍一样，NexT 的前身叫做 Notes。在做 Notes 主题的时候，基于当时的需求出发点，从好听上来讲是简洁，不好听就是简陋（真直接，脸红）。 列表1 列表2a 这是一个子列表 b 这也是一个子列表 Notes 开发于我刚接触 Hexo 时。当时我拥有一个基于 WordPress 的独立博客，这个博客主要用来写比较完整的技术类文章。在拖延症与技术挫的主观加客观因素综合作用下，这个独立博客也是产出寥寥。然而在丑小鸭能变美丽天鹅的唯美段子的安利下，我也是每天勤勤恳恳钻研技术（折腾不休）。每日阅读各路教程，搜索各种解决方案，追根溯源探索背后的原理，企图从根本上回答 “我是谁？我从哪里来？我要到哪里去？” 这类哲学问题。 这是一个神奇的导航 123456&lt;html&gt; &lt;head&gt; &lt;title&gt;头部&lt;/title&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt;&lt;/html&gt; 引用的效果","categories":[{"name":"前端","slug":"前端","permalink":"http://Tierney.com/categories/前端/"}],"tags":[{"name":"导航","slug":"导航","permalink":"http://Tierney.com/tags/导航/"},{"name":"分享","slug":"分享","permalink":"http://Tierney.com/tags/分享/"}]},{"title":"学习前端","slug":"学习前端","date":"2019-06-26T06:54:54.000Z","updated":"2019-07-02T00:50:44.361Z","comments":true,"path":"2019/06/26/学习前端/","link":"","permalink":"http://Tierney.com/2019/06/26/学习前端/","excerpt":"","text":"JS函数预编译初步理解预编译 函数定义整体提升 变量声明提 预编译目的 ：将变量或函数提升到指定作用域中，当程序执行时，到预编译作用域中查找内容。 ##函数体内预编译四部曲 预编译发生在函数执行前一刻 创建AO对象(活动对象，也叫执行期上下文，可以理解为作用域或存储空间) 找形参和变量声明，进行参和变量名作为AO属性名，值为undefined 将实参和形参统一(实参带入AO对象中的形参变量) 在函数体内找函数声明，将名做为AO属性名，值赋予函数体(提升子函数) 12345678910111213141516171819202122function demo(a,b)&#123;console.log(a);console.log(b);var b=234;console.log(b); .a=123;console.log(a);function a()&#123;&#125;;var a;b=234;var b=function ()&#123;&#125;;console.log(a);console.log(b)&#125;demo(1) //f a()&#123;&#125;undefined231123123f ()&#123;&#125; 可以从此图看出,先创建AO对象.在AO对象内部找形参和变量声明,a:undefined b:undefined实参和形参统一,a:1 b:undefined. 在函数体内找函数声明. a:function a(){} b:undefined最后依次负值输出,结果为上图控制台打印出为例.","categories":[{"name":"JS基础知识","slug":"JS基础知识","permalink":"http://Tierney.com/categories/JS基础知识/"}],"tags":[{"name":"导航","slug":"导航","permalink":"http://Tierney.com/tags/导航/"},{"name":"分享","slug":"分享","permalink":"http://Tierney.com/tags/分享/"}]},{"title":"Tierney","slug":"Tierney","date":"2019-06-25T08:02:47.000Z","updated":"2019-06-25T08:02:47.516Z","comments":true,"path":"2019/06/25/Tierney/","link":"","permalink":"http://Tierney.com/2019/06/25/Tierney/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-06-25T07:59:11.133Z","updated":"2019-06-25T07:59:11.133Z","comments":true,"path":"2019/06/25/hello-world/","link":"","permalink":"http://Tierney.com/2019/06/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}